apiVersion: v1
kind: Template
labels:
  application: customer-postgresql
metadata:
  name: customer-postgresql
objects:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 5432
      targetPort: 5432
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      application: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      recreateParams:
        post:
          execNewPod:
            command:
              - /bin/sh
              - -i
              - -c
              - sleep 10 && PGPASSWORD=$POSTGRESQL_PASSWORD psql -h $CUSTOMER_POSTGRESQL_SERVICE_HOST -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c "$POSTGRESQL_INIT"
            containerName: ${APPLICATION_NAME}
            env:
            - name: POSTGRESQL_INIT
              value: CREATE TABLE customer (customerId character varying(255) 
                NOT NULL,vipStatus character varying(255),
                balance integer NOT NULL);
                ALTER TABLE customer OWNER TO jboss;ALTER TABLE ONLY customer 
                ADD CONSTRAINT customer_pkey PRIMARY KEY (customerId);
                INSERT into customer (customerId, vipStatus, balance) 
                values ('A01', 'Diamond', 1000);
                INSERT into customer (customerId, vipStatus, balance) 
                values ('A02', 'Gold', 512);
          failurePolicy: ignore
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${CUSTOMER_DB_USERNAME}
          - name: POSTGRESQL_PASSWORD
            value: ${CUSTOMER_DB_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${CUSTOMER_DB_NAME}
          image: postgresql
          imagePullPolicy: IfNotPresent
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 5432
            protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            failureThreshold: 10
            periodSeconds: 10
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 10
            periodSeconds: 10
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 256Mi
        terminationGracePeriodSeconds: 60
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: postgresql:latest
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
parameters:
- description: Application name
  name: APPLICATION_NAME
  required: true
  value: customer-postgresql
- description: Customer Service database user name
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: CUSTOMER_DB_USERNAME
  required: true
- description: Customer Service database user password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: CUSTOMER_DB_PASSWORD
  required: true
- description: Customer Service database name
  name: CUSTOMER_DB_NAME
  required: true
  value: customerdb
